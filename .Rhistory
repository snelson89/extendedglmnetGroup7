glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd <- create.regr.data(100,2,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd <- create.regr.data(100,4,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-10,10),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,4,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd <- create.regr.data(100,2,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd <- create.regr.data(100,2,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
x1 <- rnorm(1000,10)
x2 <- rnorm(1000,5)
b0 <- 5
b1 <- -2.2
b2 <- 4
z <- b0 + b1*x1 + b2*x2
pr = 1/(1+exp(-z))
pr
y <- rbinom(1000,1,pr)
y
df = data.frame(y=y,x1=x1,x2=x2)
glm( y~x1+x2,data=df,family="binomial")
x1 <- rnorm(1000)
x2 <- rnorm(1000)
b0 <- 5
b1 <- -2.2
b2 <- 4
z <- b0 + b1*x1 + b2*x2
pr = 1/(1+exp(-z))
y <- rbinom(1000,1,pr)
df = data.frame(y=y,x1=x1,x2=x2)
glm( y~x1+x2,data=df,family="binomial")
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-10,10),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
#X[,i] <- rnorm(n,random.params[i])
X[,i] <- rnorm(n)
}
else{
#X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
X[,i] <- sample(c(0,1),n,replace = TRUE)
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,2,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd <- create.regr.data(100,2)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-10,10),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
#X[,i] <- rnorm(n,random.params[i])
X[,i] <- rnorm(n)
}
else{
#X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
X[,i] <- sample(c(0,1),n,replace = TRUE)
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,2)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-10,10),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
#X[,i] <- rnorm(n,random.params[i])
X[,i] <- rnorm(n)
}
else{
#X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
X[,i] <- sample(c(0,1),n,replace = TRUE)
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1] + rnorm(length(X))
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,2)
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-10,10),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
#X[,i] <- rnorm(n,random.params[i])
X[,i] <- rnorm(n)
}
else{
#X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
X[,i] <- sample(c(0,1),n,replace = TRUE)
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,2)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-10,10),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
#X[,i] <- rnorm(n)
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
#X[,i] <- sample(c(0,1),n,replace = TRUE)
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-100,100)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
#X[,i] <- rnorm(n)
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
#X[,i] <- sample(c(0,1),n,replace = TRUE)
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
#X[,i] <- rnorm(n)
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
#X[,i] <- sample(c(0,1),n,replace = TRUE)
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,2)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,2)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,1)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,1)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,1)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,1)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,1)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
View(dd.data)
plot(dd.data$X1,dd.data$y)
plot(dd.data$X1,dd.data$y,xlim(0,40))
plot(dd.data$X1,dd.data$y,xdim(0,40))
plot(dd.data$X1,dd.data$y,xlim=c(0,40))
plot(dd.data$X1,dd.data$y,ylim=c(-40,40))
plot(dd.data$X1,dd.data$y,ylim=c(-40,40),xlim=c(0,40))
plot(dd.data$X1,dd.data$y,ylim=c(-50,40),xlim=c(0,40))
plot(dd.data$X1,dd.data$y,ylim=c(-50,40),xlim=c(-10,40))
abline(a=-1.117,b=-1.170)
plot(dd.data$X1,dd.data$y)
abline(a=-1.117,b=-1.170)
abline(a=-6.631716,b=-1.006936)
dd2 <- create.regr.data(100,1)
dd2.data <- dd2$Data
dd2.beta <- dd2$True_Betas
glm(y~.,data=dd2.data)
dd2.beta
dd2 <- create.regr.data(1000,50)
dd2.data <- dd2$Data
dd2.beta <- dd2$True_Betas
glm(y~.,data=dd2.data)
dd2.beta
dd2 <- create.regr.data(1000,5)
dd2.data <- dd2$Data
dd2.beta <- dd2$True_Betas
glm(y~.,data=dd2.data)
dd2.beta
document()
install.packages("roxygen2")
install.packages("devtools")
library(devtools)
library(roxygen2)
document()
rm(list = c("create.regr.data"))
devtools::document()
devtools::load_all()
devtools::load_all()
create.regr.data(100,2)
data <- create.regr.data(1000,30)
library(extendedglmnetGroup7)
library(extendedglmnetGroup7)
