X <- dd.data[,1:ncol(dd.data)]
View(X)
X <- dd.data[,1:ncol(dd.data)-1]
Y <- dd.data[,-1]
View(Y)
Y <- dd.data[,ncol(dd.data)]
extended.lm(X,Y)
dd.beta
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,100)
betas <- runif(p+1,-100,100)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i],noise)
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
pr <- runif(1)
Y <- as.factor(sample(0,1),n,replace=TRUE,prob=c(pr,1-pr))
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
dd <- create.regr.data(100,5,t="binary")
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,100)
betas <- runif(p+1,-100,100)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i],noise)
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
pr <- runif(1)
Y <- as.factor(sample(c(0,1),n,replace=TRUE,prob=c(pr,1-pr)))
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,5,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
glm(y~.,data=dd.data,family="binomial")
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,100)
betas <- runif(p+1,-100,100)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i],noise)
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
pr <- runif(1)
Y <- sample(c(0,1),n,replace=TRUE,prob=c(pr,1-pr))
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,5,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family="binomial")
dd.beta
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
Z <- X %*% betas[2:(p+1)] + betas[1]
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,100)
betas <- runif(p+1,-100,100)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i],noise)
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-z))
}
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,100)
betas <- runif(p+1,-100,100)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i],noise)
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
t="binary"
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-z))
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
}
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
0
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
0
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
View(pr)
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,100)
betas <- runif(p+1,-100,100)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i],noise)
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,5,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
View(dd.data)
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,100)
betas <- runif(p+1,-100,100)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i],noise)
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- (X %*% betas[2:(p+1)]) + betas[1]
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,5,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd <- create.regr.data(1000,5,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
summary(glm(y~.,data=dd.data,family=binomial("logit")))
dd.beta
extended.lm(X,Y)
dd <- create.regr.data(1000,5)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
summary(glm(y~.,data=dd.data,family=binomial("logit")))
dd.beta
summary(lm(y~.,data=dd.data))
dd.beta
X <- dd.data[,1:ncol(dd.data)-1]
Y <- dd.data[,ncol(dd.data)]
extended.lm(X,Y)
dd <- create.regr.data(1000,5,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
summary(glm(y~.,data=dd.data,family=binomial("logit")))
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
x1 = rnorm(1000)
x2 = rnorm(1000)
z
z = 1 + 2*x1 + 3*x2
z
pr = 1/(1+exp(-z))
pr
y = rbinom(1000,1,pr)
y
dd <- create.regr.data(1000,3,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd <- create.regr.data(100,3,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
df = data.frame(y=y,x1=x1,x2=x2)
glm( y~x1+x2,data=df,family="binomial")
dd <- create.regr.data(100,2,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
n = 5
p = 2
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,100)
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
View(X)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i],noise)
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
-60*7.83 + 28*7.29
-57*7.83
-57*7.83+25*7.29
-64*7.83+22*7.29
-63*7.83+60*7.29
-63*7.83+30*7.29
-51*7.83+15*7.29
Z <- X %*% betas[2:(p+1)] + betas[1]
Z
pr <- 1/(1+exp(-Z))
pr
Y <- rbinom(n,1,pr)
Y
dd <- create.regr.data(100,2,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd.data
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,2,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd <- create.regr.data(100,2,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd <- create.regr.data(100,4,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-10,10),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,4,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd <- create.regr.data(100,2,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd <- create.regr.data(100,2,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
x1 <- rnorm(1000,10)
x2 <- rnorm(1000,5)
b0 <- 5
b1 <- -2.2
b2 <- 4
z <- b0 + b1*x1 + b2*x2
pr = 1/(1+exp(-z))
pr
y <- rbinom(1000,1,pr)
y
df = data.frame(y=y,x1=x1,x2=x2)
glm( y~x1+x2,data=df,family="binomial")
x1 <- rnorm(1000)
x2 <- rnorm(1000)
b0 <- 5
b1 <- -2.2
b2 <- 4
z <- b0 + b1*x1 + b2*x2
pr = 1/(1+exp(-z))
y <- rbinom(1000,1,pr)
df = data.frame(y=y,x1=x1,x2=x2)
glm( y~x1+x2,data=df,family="binomial")
create.regr.data <- function(n,p,t="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-10,10),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
#X[,i] <- rnorm(n,random.params[i])
X[,i] <- rnorm(n)
}
else{
#X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
X[,i] <- sample(c(0,1),n,replace = TRUE)
}
}
if(t=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1]
}
else if(t=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1]
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("t must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,2,t="binary")
dd.data <- dd$Data
dd.beta <- dd$True_Betas
glm(y~.,data=dd.data,family=binomial("logit"))
dd.beta
dd <- create.regr.data(100,2)
dd.data <- dd$Data
dd.beta <- dd$True_Betas
lm(y~.,data=dd.data)
dd.beta
