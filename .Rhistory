cv.lasso <- glmnet::cv.glmnet(X, Y, alpha=0, nfolds=5, family="gaussian")
l = cv.lasso$lambda.min
}
else{
l = lambda
}
fit <- glmnet::glmnet(X,Y,family="gaussian",alpha=0,lambda=l)
}
if(is.null(lambda)){
cv.lasso <- glmnet::cv.glmnet(X, Y, alpha=0, nfolds=5, family="gaussian")
l = cv.lasso$lambda.min
}
else{
l = lambda
}
if(is.null(lambda)){
cv.lasso <- glmnet::cv.glmnet(X, Y, alpha=0, nfolds=5, family="gaussian")
l = cv.lasso$lambda.min
} else{
l = lambda
}
if(ytype="continuous"){
if(is.null(lambda)){
cv.lasso <- glmnet::cv.glmnet(X, Y, alpha=0, nfolds=5, family="gaussian")
l = cv.lasso$lambda.min
} else{
l = lambda
}
fit <- glmnet::glmnet(X,Y,family="gaussian",alpha=0,lambda=l)
}
if(ytype="continuous"){
if(is.null(lambda)){
cv.lasso <- glmnet::cv.glmnet(X, Y, alpha=0, nfolds=5, family="gaussian")
l = cv.lasso$lambda.min
} else{
l = lambda
}
fit <- glmnet::glmnet(X,Y,family="gaussian",alpha=0,lambda=l)
}
extended.ridge <- function(X,Y,lambda=NULL,ytype="continuous"){
data <- as.data.frame(cbind(X,y=Y))
if(ytype="continuous"){
if(is.null(lambda)){
cv.lasso <- glmnet::cv.glmnet(X, Y, alpha=0, nfolds=5, family="gaussian")
l = cv.lasso$lambda.min
} else{
l = lambda
}
fit <- glmnet::glmnet(X,Y,family="gaussian",alpha=0,lambda=l)
} else if(ytype="binary"){
if(is.null(lambda)){
cv.lasso <- glmnet::cv.glmnet(X, Y, alpha=0, nfolds=5, family="binomial")
l <- cv.lasso$lambda.min
} else{
l = lambda
}
fit <- glmnet::glmnet(X,Y,family="binomial",alpha=0,lambda=l)
}
return(fit)
}
er2 <- function(X,Y,lambda=NULL,ytype="continuous"){
data <- as.data.frame(cbind(X,y=Y))
return(data)
}
er2(X,Y)
er2 <- function(X,Y,lambda=NULL,ytype="continuous"){
data <- as.data.frame(cbind(X,y=Y))
if(ytype="continuous"){
print("fuck")
}
return(data)
}
extended.ridge <- function(X,Y,lambda=NULL,ytype="continuous"){
data <- as.data.frame(cbind(X,y=Y))
if(ytype=="continuous"){
if(is.null(lambda)){
cv.lasso <- glmnet::cv.glmnet(X, Y, alpha=0, nfolds=5, family="gaussian")
l = cv.lasso$lambda.min
}
else{
l = lambda
}
fit <- glmnet::glmnet(X,Y,family="gaussian",alpha=0,lambda=l)
}
else if(ytype=="binary"){
if(is.null(lambda)){
cv.lasso <- glmnet::cv.glmnet(X, Y, alpha=0, nfolds=5, family="binomial")
l <- cv.lasso$lambda.min
}
else{
l = lambda
}
fit <- glmnet::glmnet(X,Y,family="binomial",alpha=0,lambda=l)
}
return(fit)
}
dd <- create.regr.data(50,100)
X <- as.matrix(dd$Data[,1:ncol(dd$Data)-1])
Y <- dd$Data[,"y"]
extended.ridge(X,Y)
extended.ridge(X,Y,lambda=5)
coef(extended.ridge(X,Y,lambda=5))
dd2 <- create.regr.data(50,100,ytype="binary")
X2 <- as.matrix(dd$Data[,1:ncol(dd$Data)-1])
Y2 <- dd$Data[,"y"]
dd2 <- create.regr.data(50,100,ytype="binary")
X2 <- as.matrix(dd2$Data[,1:ncol(dd$Data)-1])
Y2 <- dd$Data[,"y"]
dd2 <- create.regr.data(50,100,ytype="binary")
X2 <- as.matrix(dd2$Data[,1:ncol(dd2$Data)-1])
Y2 <- dd2$Data[,"y"]
Y2
dd2 <- create.regr.data(50,100,ytype="binary")
X2 <- as.matrix(dd2$Data[,1:ncol(dd2$Data)-1])
Y2 <- dd2$Data[,"y"]
Y2
dd2$Data
dd2 <- create.regr.data(50,100,ytype="binary")
X2 <- as.matrix(dd2$Data[,1:ncol(dd2$Data)-1])
Y2 <- dd2$Data[,"y"]
dd2Data
dd2$Data
dd2 <- create.regr.data(50,100,ytype="binary")$Data
create.regr.data(50,100,ytype="binary")$Data
create.regr.data(50,100,ytype="binary")$Data
create.regr.data(50,100,ytype="binary")$Data
create.regr.data(50,100,ytype="binary")$Data
create.regr.data(50,100,ytype="binary")$Data
create.regr.data(50,100,ytype="binary")$Data
create.regr.data(50,100,ytype="binary")$Data
create.regr.data(1000,50,ytype="binary")$Data
create.regr.data(100,5,ytype="binary")$Data
create.regr.data(25,5,ytype="binary")$Data
Z <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
create.regr.data <- function(n,p,ytype="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(ytype=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
}
else if(ytype=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
pr <- 1/(1+exp(-Z))
Y <- rbinom(n,1,pr)
}
else{
warning("ytype must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
create.regr.data(50,2,"binary")
create.regr.data(50,2,"binary")
create.regr.data(50,2,"binary")
create.regr.data(50,2,"binary")
create.regr.data(50,2,"binary")
dd <- create.regr.data(5000,10,"binary")$Data
View(dd)
dd <- create.regr.data(5000,10,"binary")$Data
dd <- create.regr.data(5000,10,"binary")$Data
View(dd)
create.regr.data <- function(n,p,ytype="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(ytype=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
}
else if(ytype=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X))
#pr <- 1/(1+exp(-Z))
pr=exp(Z)/(1+exp(Z))
Y <- rbinom(n,1,pr)
}
else{
warning("ytype must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(5000,10,"binary")$Data
View(dd)
create.regr.data <- function(n,p,ytype="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-100,100),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(ytype=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X),0,200)
}
else if(ytype=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X),0,200)
#pr <- 1/(1+exp(-Z))
pr=exp(Z)/(1+exp(Z))
Y <- rbinom(n,1,pr)
}
else{
warning("ytype must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(5000,10,"binary")$Data
View(dd)
dd <- create.regr.data(50,10,"binary")$Data
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
dd
dd <- create.regr.data(50,3,"binary")$Data
dd
dd <- create.regr.data(50,3,"binary")$Data
dd
dd <- create.regr.data(50,3,"binary")$Data
dd
create.regr.data <- function(n,p,ytype="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-10,10),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(ytype=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X),0,200)
}
else if(ytype=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X),0,200)
#pr <- 1/(1+exp(-Z))
pr=exp(Z)/(1+exp(Z))
Y <- rbinom(n,1,pr)
}
else{
warning("ytype must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(50,3,"binary")$Data
dd
dd <- create.regr.data(50,3,"binary")$Data
dd
dd <- create.regr.data(50,3,"binary")$Data
dd
dd <- create.regr.data(50,3,"binary")$Data
dd
dd <- create.regr.data(100,20,"binary")$Data
dd
create.regr.data <- function(n,p,ytype="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-100,100)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-10,10),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(ytype=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X),0,200)
}
else if(ytype=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X),0,200)
#pr <- 1/(1+exp(-Z))
pr=exp(Z)/(1+exp(Z))
Y <- rbinom(n,1,pr)
}
else{
warning("ytype must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,20,"binary")$Data
dd
dd <- create.regr.data(100,20,"binary")$Data
dd
create.regr.data <- function(n,p,ytype="continuous"){
p.continuous <- round(p*runif(1))
p.binary <- p-p.continuous
noise <- runif(1,0,10)
betas <- runif(p+1,-10,10)
# set random means and random sampling probabilities for binomial
random.params <- c(runif(p.continuous,-10,10),runif(p.binary))
X <- matrix(rep(NA,n*p),nrow=n,ncol=p)
for(i in 1:p){
if(i <= p.continuous){
X[,i] <- rnorm(n,random.params[i])
}
else{
X[,i] <- sample(c(0,1),n,replace = TRUE,prob=c(random.params[i],1-random.params[i]))
}
}
if(ytype=="continuous"){
Y <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X),0,200)
}
else if(ytype=="binary"){
Z <- X %*% betas[2:(p+1)] + betas[1] + rnorm(nrow(X),0,200)
#pr <- 1/(1+exp(-Z))
pr=exp(Z)/(1+exp(Z))
Y <- rbinom(n,1,pr)
}
else{
warning("ytype must be either continuous or binary")
}
df <- data.frame(cbind(X,Y))
names(df)[p+1] <- "y"
return(list(True_Betas=betas,
Data=df))
}
dd <- create.regr.data(100,20,"binary")$Data
dd
dd <- create.regr.data(100,20,"binary")$Data
dd
dd <- create.regr.data(50,100)
X <- as.matrix(dd$Data[,1:ncol(dd$Data)-1])
Y <- dd$Data[,"y"]
dd2 <- create.regr.data(50,100,ytype="binary")
dd2 <- create.regr.data(50,100,ytype="binary")
dd <- create.regr.data(100,20,"binary")$Data
dd
dd <- create.regr.data(50,100,"binary")$Data
dd
dd <- create.regr.data(50,100,"binary")$Data
dd
dd <- create.regr.data(50,10,"binary")$Data
de
devtools::build()
devtools::document()
rm(list = c("create.regr.data", "extended.ridge")
d
rm(list = c("create.regr.data", "extended.ridge")
)
sd
rm(list = c("create.regr.data", "extended.ridge"))
devtools::build()
devtools::document()
devtools::install_github("snelson89/extendedglmnetGroup7")
library(extendedglmnetGroup7)
create.regr.data(20,3)
library(extendedglmnetGroup7)
create.regr.data(20,3)
library(extendedglmnetGroup7)
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,-c(-1)]
Y2 <- dd[,c(-1)]
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.ridge(X2,Y2,lambda=100,ytype="continuous")
coef(fit)[1:21]
X <- dat[,2:ncol(dat)]
Y <- dat[,1]
fit <- extended.lasso(X,Y,ytype="binary")
devtools::build()
X <- dat[,2:ncol(dat)]
Y <- dat[,1]
fit <- extended.lasso(X,Y,ytype="binary")
devtools::load_all()
X <- dat[,2:ncol(dat)]
Y <- dat[,1]
fit <- extended.lasso(X,Y,ytype="binary")
coef(fit)[1:21]
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
coef(fit)[1:21]
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
which(coef(fit) != 0)
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
coef(fit)
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
str(coef(fit))
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
coef(fit)
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
coef(fit)[coef(fit) != 0]
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
print(length(coef(fit)[coef(fit) != 0]))
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
nonzero.c <- length(coef(fit)[coef(fit) != 0])
paste("There are",nonzero.c-1,"coefficients")
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
nonzero.c <- length(coef(fit)[coef(fit) != 0])
paste("There are",nonzero.c-1,"zonzero coefficients")
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
nonzero.c <- length(coef(fit)[coef(fit) != 0])
paste("There are",nonzero.c-1,"zonzero coefficients")
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
nonzero.c <- length(coef(fit)[coef(fit) != 0])
paste("There are",nonzero.c-1,"zonzero coefficients")
dd <- create.regr.data(72,3751)$Data
X2 <- dd[,1:(ncol(dd)-1)]
Y2 <- dd[,c(ncol(dd))]
fit <- extended.lasso(X2,Y2,lambda=100,ytype="continuous")
nonzero.c <- length(coef(fit)[coef(fit) != 0])
paste("There are",nonzero.c-1,"zonzero coefficients")
devtools::install()
